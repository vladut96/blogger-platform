import { ValidationPipe } from '@nestjs/common';
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { INestApplication } from '@nestjs/common';
import { RequestListener } from 'http';
import { Request, Response } from 'express';

let cachedApp: INestApplication | null = null;

async function bootstrap() {
  if (!cachedApp) {
    const app = await NestFactory.create(AppModule);
    app.enableCors();
    app.useGlobalPipes(
      new ValidationPipe({
        transform: true, // ‚ö°Ô∏è –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç plain object –≤ instance —Ç–≤–æ–µ–≥–æ DTO
        whitelist: true, // ‚ö°Ô∏è —É–±–∏—Ä–∞–µ—Ç –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ DTO
        forbidNonWhitelisted: false, // –µ—Å–ª–∏ true ‚Üí –≤—ã–±—Ä–æ—Å–∏—Ç –æ—à–∏–±–∫—É –Ω–∞ –ª–∏—à–Ω–∏–µ –ø–æ–ª—è
      }),
    );
    await app.init(); // ‚ö°Ô∏è –±–µ–∑ listen
    cachedApp = app;
  }
  return cachedApp.getHttpAdapter().getInstance() as RequestListener;
}

// –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ ‚Üí —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π bootstrap —Å app.listen()
if (!process.env.VERCEL) {
  (async () => {
    const app = await NestFactory.create(AppModule);
    app.enableCors();
    app.useGlobalPipes(
      new ValidationPipe({
        transform: true, // ‚ö°Ô∏è –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç plain object –≤ instance —Ç–≤–æ–µ–≥–æ DTO
        whitelist: true, // ‚ö°Ô∏è —É–±–∏—Ä–∞–µ—Ç –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ DTO
        forbidNonWhitelisted: false, // –µ—Å–ª–∏ true ‚Üí –≤—ã–±—Ä–æ—Å–∏—Ç –æ—à–∏–±–∫—É –Ω–∞ –ª–∏—à–Ω–∏–µ –ø–æ–ª—è
      }),
    );
    await app.listen(process.env.PORT ?? 3000);
    console.log(
      `üöÄ Application is running on: http://localhost:${process.env.PORT ?? 3000}`,
    );
  })();
}

export default async function handler(req: Request, res: Response) {
  const app = await bootstrap();
  return app(req, res);
}
